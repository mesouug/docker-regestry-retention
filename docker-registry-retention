#!/usr/bin/env python

from os.path import expanduser
from datetime import datetime
import argparse
import json
import re
import requests
import sys


def parse_arguments():
    parser = argparse.ArgumentParser(description="Script removes Docker " +
                                     "images from Docker Registry leaving " +
                                     "only latest N images")
    parser.add_argument("-c", "--config",
                        help="path to docker config file, " +
                        "default is ~/.docker/config.json",
                        default=expanduser("~/.docker/config.json"))
    parser.add_argument("-d", "--dryrun",
                        help="Run without deleting anything",
                        action='store_true')
    parser.add_argument("-g", "--registry",
                        help="docker registry domain",
                        required=True)
    parser.add_argument("-k", "--keyword",
                        help="filter tags using KEYWORD",
                        default='.')
    parser.add_argument("-r", "--retain",
                        help="retain N images, default is 10",
                        default=10,
                        type=int)
    parser.add_argument("-p", "--repository",
                        help="docker repository path",
                        required=True)
    return parser.parse_args()


def error(message):
    print message
    sys.exit()


def read_config(config, registry):
    try:
        with open(config) as f:
            return json.load(f)['auths'][registry]['auth']
    except IOError as err:
        error(err)
    except TypeError as err:
        error(err)
    except KeyError as err:
        error("Docker Auth for {} registry was not found".format(err))


def obtain_bearer_token(basic_auth, repository, registry):
    auth = requests.get('https://{}/v2/'.format(registry))
    auth_str = auth.headers['Www-Authenticate'].split(" ")[1].split(",")
    auth_dict = dict([ex.strip('"') for ex in e.split("=")] for e in auth_str)

    bt_payload = {'client_id': 'docker',
                  'offline_token': 'true',
                  'service': auth_dict['service'],
                  'scope': 'repository:{}:pull,delete'.format(repository)}
    bt_headers = {'Authorization': 'Basic {}'.format(basic_auth)}
    try:
        bt = requests.get(url=auth_dict['realm'],
                          params=bt_payload,
                          headers=bt_headers).json()['token']
    except err:
        error(err)

    return bt


def get_headers(accept=False):
    hdrs = {'Content-Type': 'application/json',
            'Authorization': 'Bearer {}'.format(bt)}
    if accept:
        hdrs.update({'Accept':
                     'application/vnd.docker.distribution.manifest.v2+json'})
    return hdrs


def make_request(url, headers, params=None, method="GET"):
    try:
        response = requests.request(url=url,
                                    params=params,
                                    headers=headers,
                                    method=method)
    except requests.exceptions.ConnectionError as err:
        error(err)
    return response


def get_images_to_delete():
    keyword = re.compile(r"{}".format(args.keyword))
    tags_url = "https://{}/v2/{}/tags/list".format(args.registry,
                                                   args.repository)
    list = make_request(url=tags_url, headers=get_headers()).json()['tags']
    filtered_list = [tag for tag in list if re.match(keyword, tag)]
    print("Discovered following tags: {}".format(', '.join(list)))
    print("Filtered List of tags: {}".format(', '.join(filtered_list)))

    images = []
    for tag in filtered_list:
        tag_url = "https://{}/v2/{}/manifests/{}".format(args.registry,
                                                         args.repository,
                                                         tag)
        image_manifest = make_request(url=tag_url, headers=get_headers())
        try:
            raw_json = image_manifest.json()['history'][0]['v1Compatibility']
            image_date = json.loads(raw_json)['created'][:19]
            timestamp = datetime.strptime(image_date, "%Y-%m-%dT%H:%M:%S")
            images.append({'secs': timestamp.strftime('%s'), 'tag': tag})
            print "At {} created was tag {}".format(timestamp, tag)
        except KeyError as err:
            print "Key not found '{}' for tag '{}'".format(err, tag)

    return sorted(images, key=lambda image: image['secs'])[:-args.retain]


def delete_images():
    for image in get_images_to_delete():
        print "Deleting image with tag: {}".format(image['tag'])
        image_url = "https://{}/v2/{}/manifests/{}".format(args.registry,
                                                           args.repository,
                                                           image['tag'])

        image_manifest = requests.get(url=image_url,
                                      headers=get_headers(True))
        try:
            image_digest = image_manifest.headers['Docker-Content-Digest']
            image_url = "https://{}/v2/{}/manifests/{}".format(args.registry,
                                                               args.repository,
                                                               image_digest)
            if not args.dryrun:
                image_delete = make_request(url=image_url,
                                            headers=get_headers(),
                                            method="DELETE")
        except KeyError as err:
            print "Key not found '{}'".format(err)


if __name__ == '__main__':
    args = parse_arguments()
    bt = obtain_bearer_token(read_config(args.config, args.registry),
                             args.repository,
                             args.registry)
    delete_images()
